{"version":3,"sources":["components/shared/Container/styles.module.scss","components/home/container/HomePage/styles.module.scss","components/home/container/SidePanel/styles.module.scss","components/home/container/Editor/styles.module.scss","components/shared/Container/index.jsx","components/home/container/SidePanel/index.jsx","components/home/container/Editor/index.jsx","components/home/container/HomePage/index.jsx","themes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Container","SidePanel","className","styles","EditorView","HomePage","HomeLayout","Editor","Component","stylefire","color","primary","secondary","background","light","dark","apply","App","init","exact","path","component","Boolean","window","location","hostname","match","styleFire","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,UAAY,4B,mBCA9BD,EAAOC,QAAU,CAAC,WAAa,6B,mBCA/BD,EAAOC,QAAU,CAAC,UAAY,4B,mBCA9BD,EAAOC,QAAU,CAAC,WAAa,6B,8NCUhBC,I,kCCAAC,MARf,WACI,OACI,yBAAKC,UAAWC,IAAOF,a,iBCMhBG,MARf,WACI,OACI,yBAAKF,UAAWC,IAAOC,cCCVC,E,iLAEb,OACI,yBAAKH,UAAWC,IAAOG,YACnB,kBAAC,EAAD,MACA,kBAACC,EAAD,W,GALsBC,aCkBtCC,SAAiB,QAtBH,CACVC,MAAO,CACHC,QAAS,UACTC,UAAW,UACXC,WAAY,CACRC,MAAO,UACPC,KAAM,cAiBlBN,SAAiB,OAZJ,CACTC,MAAO,CACHC,QAAS,UACTC,UAAW,UACXC,WAAY,CACRC,MAAO,UACPC,KAAM,cAMaC,QAEhBP,QCRAQ,MAbf,WAIE,OAFAR,EAAUS,OAGR,kBAAC,IAAD,KACE,yBAAKhB,UAAU,OACb,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,IAAIC,UAAWhB,OCDrBiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCRNC,SACAC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.afd7dd74.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__2vd_D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"HomeLayout\":\"styles_HomeLayout__292YB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SidePanel\":\"styles_SidePanel__30-Vr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"EditorView\":\"styles_EditorView__nF7Lt\"};","import React from 'react'\nimport styles from './styles.module.scss';\n\nfunction Container({ children }) {\n    return (\n        <div className={styles.container}>\n            { children }\n        </div>\n    )\n}\n\nexport default Container;\n","import React from 'react';\nimport styles from './styles.module.scss';\n\nfunction SidePanel() {\n    return (\n        <div className={styles.SidePanel}>\n            \n        </div>\n    )\n}\n\nexport default SidePanel\n","import React from 'react'\nimport styles from './styles.module.scss';\n\nfunction EditorView() {\n    return (\n        <div className={styles.EditorView}>\n            \n        </div>\n    )\n}\n\nexport default EditorView\n","import React, { Component } from 'react'\nimport Container from '../../../shared/Container';\nimport styles from './styles.module.scss';\nimport SidePanel from '../SidePanel';\nimport EditorView from '../Editor';\n\nexport default class HomePage extends Component {\n    render() {\n        return (\n            <div className={styles.HomeLayout}>\n                <SidePanel/>\n                <EditorView/>\n            </div>\n        )\n    }\n}\n","import * as stylefire from '@haxzie/stylefire';\n\nconst light = {\n    color: {\n        primary: \"#4287f5\",\n        secondary: \"#3e4754\",\n        background: {\n            light: \"#fcfcfc\",\n            dark: \"#e6e6e6\"\n        }\n    }\n}\n\nconst dark = {\n    color: {\n        primary: \"#4287f5\",\n        secondary: \"#3e4754\",\n        background: {\n            light: \"#353842\",\n            dark: \"#292a33\"\n        }\n    }\n}\n\nstylefire.create('light', light);\nstylefire.create('dark', dark).apply();\n\nexport default stylefire;","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport HomePage from './components/home/container/HomePage';\nimport stylefire from './themes';\n\n\nfunction App() {\n\n  stylefire.init();\n  \n  return (\n    <Router>\n      <div className=\"App\">\n        <Route exact path=\"/\" component={HomePage}/>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as styleFire from '@haxzie/stylefire';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// global stylesheets\nimport './styles/reset.scss';\nimport './styles/global.scss';\n\n// load initial theme\nstyleFire.init();\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}